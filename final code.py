{"cells":[{"cell_type":"code","execution_count":2,"id":"1c3fe05b","metadata":{"id":"1c3fe05b","executionInfo":{"status":"error","timestamp":1697570853330,"user_tz":-60,"elapsed":20,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}},"outputId":"497fc9d1-d742-4612-dccd-9cdf300f267e","colab":{"base_uri":"https://localhost:8080/","height":393}},"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-cbe68fcfec49>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# -------- import all the module --------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mspeasy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mspz\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mdatetime\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdatetime\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimedelta\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'speasy'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}],"source":["# -------- import all the module --------\n","import speasy as spz\n","import time\n","import matplotlib.pyplot as plt\n","from datetime import datetime, timedelta\n","import numpy as np\n","import math\n","import pandas as pd\n","import import_ipynb\n","import SerPyShock as SP\n","import functions as func\n","%matplotlib widget"]},{"cell_type":"code","execution_count":3,"id":"f412df2e","metadata":{"id":"f412df2e","executionInfo":{"status":"error","timestamp":1697570853331,"user_tz":-60,"elapsed":15,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}},"outputId":"36f33b08-6ef2-4cc2-a561-6a75f65b65d5","colab":{"base_uri":"https://localhost:8080/","height":250}},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-2fec3ed29bed>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# -------------- importing database ------------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mamda_tree\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mspz\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minventories\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mamda\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mcda_tree\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mspz\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minventories\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcda\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'spz' is not defined"]}],"source":["# -------------- importing database ------------\n","amda_tree = spz.inventories.tree.amda\n","\n","cda_tree = spz.inventories.tree.cda\n","\n","ssc_tree = spz.inventories.tree.ssc"]},{"cell_type":"markdown","id":"55e90842","metadata":{"id":"55e90842"},"source":["#### Input"]},{"cell_type":"code","execution_count":null,"id":"7d563e69","metadata":{"id":"7d563e69","executionInfo":{"status":"aborted","timestamp":1697570853331,"user_tz":-60,"elapsed":14,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}}},"outputs":[],"source":["#=============== input date, time in second of the shock and period of time to show before and after the shock =========\n","# DD/MM/YYYY\n","date = ['20','02','2014']\n","\n","# HH, MM, SS in SW\n","t1 = ['02','00','00']\n","\n","# HH, MM, SS in msh\n","t3 = ['03', '00', '00']\n","\n","# input name of the spacecraft in msh\n","name_spacecraft_msh = 'WIND'\n","\n","# input name of the spacecraft in SW\n","name_spacecraft_SW = \"THD\"\n","\n","# index shock for chris\n","index = '15'\n","\n","# time observed before and after the shock in SW and msh\n","time_obs = 100\n","\n","#name of the file you want to create/ save the data in\n","name_file = 'data_shock.json'"]},{"cell_type":"markdown","id":"972e3e4d","metadata":{"id":"972e3e4d"},"source":["# Information satellite SW"]},{"cell_type":"code","execution_count":null,"id":"9781009e","metadata":{"id":"9781009e","executionInfo":{"status":"aborted","timestamp":1697570853331,"user_tz":-60,"elapsed":13,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}}},"outputs":[],"source":["# calcul good format date\n","day = int(date[0])\n","month = int(date[1])\n","year = int(date[2])\n","\n","# calcul good format date for Chris\n","form_date = date[0] +'/'+ date[1] +'/'+ date[2]\n","\n","# calcul good format time for chris\n","form_t1_chris = [int(t1[0]), int(t1[1]), int(t1[2])]\n","\n","# calcul good format time for SW\n","time_val_SW = t1[0] + ':' + t1[1] + ':' + t1[2]\n","\n","start_date_SW, end_date_SW, time_shock_SW = func.find_time(day,month,year,time_val_SW,time_obs)\n","\n","# ----- Variable defined for the multiple averaging windows -----\n","# =========== change the value for the averaging windows ==================\n","up_shk_SW = time_shock_SW - timedelta(minutes = 5)\n","dw_shk_SW = time_shock_SW + timedelta(minutes = 5)\n","min_up_dur_SW = timedelta(minutes = 3)\n","max_up_dur_SW = timedelta(minutes = 10)\n","min_dw_dur_SW = timedelta(minutes = 3)\n","max_dw_dur_SW = timedelta(minutes = 10)\n","tcad_SW = timedelta(seconds = 10)\n","\n","# Define the list of time up and down for our averaging range\n","time_up_SW = (time_shock_SW - max_up_dur_SW, up_shk_SW)\n","time_down_SW = (dw_shk_SW, time_shock_SW + max_dw_dur_SW)\n","\n","#define variable to plot the minimum and maximum windows\n","up_window_SW = (up_shk_SW - min_up_dur_SW,up_shk_SW - max_up_dur_SW)\n","down_window_SW = (dw_shk_SW + min_dw_dur_SW, dw_shk_SW + max_dw_dur_SW)"]},{"cell_type":"markdown","id":"e314b848","metadata":{"id":"e314b848"},"source":["## Get data MAGNETIC FIELD"]},{"cell_type":"code","execution_count":null,"id":"6de081dc","metadata":{"id":"6de081dc","executionInfo":{"status":"aborted","timestamp":1697570853331,"user_tz":-60,"elapsed":13,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}}},"outputs":[],"source":["# -------- get the data --------\n","time_mag_SW, B_SW, B_unit_SW, Bx_SW, By_SW, Bz_SW, B_up_SW, B_down_SW = func.get_Bfield(name_spacecraft_SW, start_date_SW, end_date_SW, time_up_SW, time_down_SW)\n","\n","\n","Bx_SW = [b_SW[0] for b_SW in B_SW]\n","By_SW = [b_SW[1] for b_SW in B_SW]\n","Bz_SW = [b_SW[2] for b_SW in B_SW]\n","\n","# ----- Variable defined for the multiple averaging windows -----\n","datetime_objects_SW = pd.to_datetime(time_mag_SW)\n","freq = 'ns'\n","datetime_index_SW = pd.DatetimeIndex(datetime_objects_SW).floor(freq)\n","\n","\n","# =========== Defining the averaging windows for B_up, B_down ===========================\n","# -------------- filtered the value of magnetic field for the defined window range ---------------\n","filtered_Bx_up_SW,filtered_By_up_SW,filtered_Bz_up_SW = func.filtered_B_up(time_mag_SW, Bx_SW, By_SW, Bz_SW, time_up_SW)\n","filtered_Bx_down_SW, filtered_By_down_SW, filtered_Bz_down_SW = func.filtered_B_down(time_mag_SW, Bx_SW, By_SW, Bz_SW, time_down_SW)\n","\n","# ================== calculate average upstream and downstream for bx, by, bz ==========================\n","# ------------ calculate uncertainty for magnetic field --------------------\n","uncertainty_Bx_up_SW = np.std(filtered_Bx_up_SW)\n","uncertainty_Bx_down_SW = np.std(filtered_Bx_down_SW)\n","uncertainty_By_up_SW = np.std(filtered_By_up_SW)\n","uncertainty_By_down_SW = np.std(filtered_By_down_SW)\n","uncertainty_Bz_up_SW = np.std(filtered_Bz_up_SW)\n","uncertainty_Bz_down_SW = np.std(filtered_Bz_down_SW)\n","\n","Bx_up_SW, Bx_down_SW, By_up_SW, By_down_SW, Bz_up_SW, Bz_down_SW =func.calculate_average(filtered_Bx_up_SW,filtered_Bx_down_SW,filtered_By_up_SW,filtered_By_down_SW,filtered_Bz_up_SW,filtered_Bz_down_SW)\n","#create a vector B for an averaging window\n","list_B_up_SW = [Bx_up_SW, By_up_SW, Bz_up_SW]\n","list_B_down_SW = [Bx_down_SW, By_down_SW, Bz_down_SW]\n","\n","vector_B_up_SW = np.array(list_B_up_SW)\n","vector_B_down_SW = np.array(list_B_down_SW)"]},{"cell_type":"markdown","id":"b44eb18a","metadata":{"id":"b44eb18a"},"source":["## Get data VELOCITY"]},{"cell_type":"code","execution_count":null,"id":"91aeccb8","metadata":{"id":"91aeccb8","executionInfo":{"status":"aborted","timestamp":1697570853331,"user_tz":-60,"elapsed":13,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}}},"outputs":[],"source":["# Get data for velocity\n","time_velo_SW, V_SW, V_unit_SW, Vx_SW, Vy_SW, Vz_SW, V_up_SW, V_down_SW = func.get_velocity(name_spacecraft_SW, start_date_SW, end_date_SW, time_up_SW, time_down_SW)\n","\n","Vx_SW = [v_SW[0] for v_SW in V_SW]\n","Vy_SW = [v_SW[1] for v_SW in V_SW]\n","Vz_SW = [v_SW[2] for v_SW in V_SW]\n","\n","# ================= Defining the averaging windows for V_up, V_down =================\n","# ----------------------- filtered the velocity for the window range ---------------------\n","filtered_Vx_up_SW, filtered_Vy_up_SW, filtered_Vz_up_SW = func.filtered_V_up(time_velo_SW,Vx_SW, Vy_SW, Vz_SW,time_up_SW)\n","filtered_Vx_down_SW, filtered_Vy_down_SW, filtered_Vz_down_SW = func.filtered_V_down(time_velo_SW,Vx_SW, Vy_SW, Vz_SW,time_down_SW)\n","\n","# ==================== Calculating the average upstream and downstream of Vx, Vy, Vz ====================\n","from scipy.interpolate import interp1d\n","data_SW = V_SW\n","\n","# Number of indexes to extend\n","num_indexes_SW = np.shape(B_SW)[0]\n","\n","# Generate an array of indices\n","indices_SW = np.arange(data_SW.shape[0])\n","\n","# Interpolate each column separately\n","interpolated_data_V_SW = np.empty((num_indexes_SW, data_SW.shape[1]))\n","for col in range(data_SW.shape[1]):\n","    interpolator_SW = interp1d(indices_SW, data_SW[:, col], kind='cubic')\n","    interpolated_data_V_SW[:, col] = interpolator_SW(np.linspace(0, indices_SW[-1], num_indexes_SW))\n","\n","# ------------- calculate uncertainty for velocity ------------\n","uncertainty_Vx_up_SW = np.std(filtered_Vx_up_SW)\n","uncertainty_Vx_down_SW = np.std(filtered_Vx_down_SW)\n","uncertainty_Vy_up_SW = np.std(filtered_Vy_up_SW)\n","uncertainty_Vy_down_SW = np.std(filtered_Vy_down_SW)\n","uncertainty_Vz_up_SW = np.std(filtered_Vz_up_SW)\n","uncertainty_Vz_down_SW = np.std(filtered_Vz_down_SW)\n","\n","Vx_up_SW, Vx_down_SW, Vy_up_SW, Vy_down_SW, Vz_up_SW, Vz_down_SW = func.calculate_average(filtered_Vx_up_SW,filtered_Vx_down_SW,filtered_Vy_up_SW,filtered_Vy_down_SW,filtered_Vz_up_SW,filtered_Vz_down_SW)\n","\n","#create a vector V for a defined range\n","list_V_up_SW = [Vx_up_SW, Vy_up_SW, Vz_up_SW]\n","list_V_down_SW = [Vx_down_SW, Vy_down_SW, Vz_down_SW]\n","\n","vector_V_up_SW = np.array(list_V_up_SW)\n","vector_V_down_SW = np.array(list_V_down_SW)"]},{"cell_type":"markdown","id":"74f2e9cc","metadata":{"id":"74f2e9cc"},"source":["## Get data density"]},{"cell_type":"code","execution_count":null,"id":"d9b7f2ec","metadata":{"id":"d9b7f2ec","executionInfo":{"status":"aborted","timestamp":1697570853331,"user_tz":-60,"elapsed":13,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}}},"outputs":[],"source":["# -------- get the data for the density --------\n","time_rho_SW, density_SW, density_unit_SW, density_up_SW, density_down_SW = func.get_density(name_spacecraft_SW, start_date_SW, end_date_SW, time_up_SW, time_down_SW)\n","\n","Rho_SW = [Density_SW[0] for Density_SW in density_SW]\n","\n","# =================== Defining the averaging windows for n_up, n_down =====================\n","filtered_density_up_SW = func.filtered_N_up(time_rho_SW,Rho_SW,time_up_SW)\n","filtered_density_down_SW = func.filtered_N_down(time_rho_SW,Rho_SW,time_down_SW)\n","\n","# ----- calculate uncertainty density -----\n","uncertainty_density_x_up_SW = np.std(filtered_density_up_SW)\n","uncertainty_density_x_down_SW = np.std(filtered_density_down_SW)\n","\n","# ------- Make an array with the data --------\n","indices_density_SW = np.linspace(0, len(density_SW) - 1, num=len(density_SW))\n","\n","new_indices_density_SW = np.linspace(0, len(density_SW) - 1, num=np.shape(B_SW)[0])\n","\n","original_data_flat_SW = np.ravel(density_SW)\n","indices_flat_SW = np.ravel(indices_density_SW)\n","\n","extended_density_SW = np.interp(new_indices_density_SW, indices_flat_SW, original_data_flat_SW)\n","\n","# Reshape extended_density\n","extended_density_reshaped_SW = extended_density_SW.reshape((np.shape(B_SW)[0], 1))"]},{"cell_type":"markdown","id":"c55e1959","metadata":{"id":"c55e1959"},"source":["## Infos needed for Chris"]},{"cell_type":"code","execution_count":4,"id":"326909f0","metadata":{"id":"326909f0","executionInfo":{"status":"error","timestamp":1697570853331,"user_tz":-60,"elapsed":13,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}},"outputId":"64d25d0b-a533-44c6-840d-45f75f782177","colab":{"base_uri":"https://localhost:8080/","height":250}},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-a3e0ecb67725>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# -------------- find the coordinates of the satellite ----------------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mS1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_coordinate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname_spacecraft_SW\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtime_shock_SW\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# -------------- calculate average values for B ----------------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'func' is not defined"]}],"source":["# -------------- find the coordinates of the satellite ----------------\n","S1 = func.get_coordinate(name_spacecraft_SW,time_shock_SW)[0]\n","print(\"\")\n","\n","# -------------- calculate average values for B ----------------\n","print(\"Average B values: \")\n","Bx_up_SW, Bx_down_SW, By_up_SW, By_down_SW, Bz_up_SW, Bz_down_SW = func.calculate_average(filtered_Bx_up_SW,filtered_Bx_down_SW,filtered_By_up_SW,filtered_By_down_SW,filtered_Bz_up_SW,filtered_Bz_down_SW)\n","\n","print(\"Bx up: \", Bx_up_SW, \"±\",uncertainty_Bx_up_SW)\n","print(\"Bx down: \", Bx_down_SW, \"±\",uncertainty_Bx_down_SW)\n","print(\"By up: \", By_up_SW, \"±\",uncertainty_By_up_SW)\n","print(\"By down: \", By_down_SW, \"±\",uncertainty_By_down_SW)\n","print(\"Bz up: \", Bz_up_SW, \"±\",uncertainty_Bz_up_SW)\n","print(\"Bz down: \", Bz_down_SW, \"±\",uncertainty_Bz_down_SW)\n","print(\"\")\n","\n","\n","\n","# --------------- calculate average values for V --------------------\n","print(\"Average V values: \")\n","Vx_up_SW, Vx_down_SW, Vy_up_SW, Vy_down_SW, Vz_up_SW, Vz_down_SW = func.calculate_average(filtered_Vx_up_SW,filtered_Vx_down_SW,filtered_Vy_up_SW,filtered_Vy_down_SW,filtered_Vz_up_SW,filtered_Vz_down_SW)\n","\n","print(\"Vx up: \",Vx_up_SW, \"±\",uncertainty_Vx_up_SW)\n","print(\"Vx down: \",Vx_down_SW, \"±\",uncertainty_Vx_down_SW)\n","print(\"Vy up: \",Vy_up_SW, \"±\",uncertainty_Vx_up_SW)\n","print(\"Vy down: \",Vy_down_SW, \"±\",uncertainty_Vx_down_SW)\n","print(\"Vz up: \",Vz_up_SW, \"±\",uncertainty_Vx_up_SW)\n","print(\"Vz down: \",Vz_down_SW, \"±\",uncertainty_Vx_down_SW)\n","print(\"\")\n","\n","\n","# ----------------- Calculate the average value for n ------------------\n","density_up_mean_SW = sum(filtered_density_up_SW) / len(filtered_density_up_SW)\n","density_down_mean_SW = sum(filtered_density_down_SW) / len(filtered_density_down_SW)\n","\n","print(\"Average density up:\", density_up_mean_SW, \"±\",uncertainty_density_x_up_SW )\n","print(\"Average density down:\", density_down_mean_SW, \"±\",uncertainty_density_x_down_SW)"]},{"cell_type":"markdown","id":"5a04c869","metadata":{"id":"5a04c869"},"source":["## Calculating normal and velocity with one window"]},{"cell_type":"code","execution_count":null,"id":"5b50cb27","metadata":{"id":"5b50cb27","executionInfo":{"status":"aborted","timestamp":1697570853332,"user_tz":-60,"elapsed":13,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}}},"outputs":[],"source":["# ======================== Computing the normals: MC, VC, MX1, MX2, MX3 =========================\n","\n","# ---------- define cross product --------\n","delta_B_SW = (vector_B_up_SW) - (vector_B_down_SW)\n","\n","delta_V_SW = (vector_V_up_SW) - (vector_V_down_SW)\n","\n","B_up_cross_B_down_SW = np.cross(vector_B_up_SW, vector_B_down_SW)\n","\n","delta_V_cross_B_up_SW = np.cross(delta_V_SW, vector_B_up_SW)\n","\n","delta_V_cross_B_down_SW = np.cross(delta_V_SW, vector_B_down_SW)\n","\n","delta_V_cross_delta_B_SW = np.cross(delta_V_SW, delta_B_SW)\n","\n","\n","\n","# -------- calculate and print normal with MC method --------\n","normal_MC_SW = -(np.cross(B_up_cross_B_down_SW,-delta_B_SW)) / (func.magnitude((np.cross(B_up_cross_B_down_SW,-delta_B_SW))))\n","\n","Bu_dot_nMC_SW = np.dot(-vector_B_up_SW,normal_MC_SW)\n","\n","tbn_MC_SW = np.arccos(Bu_dot_nMC_SW / (np.linalg.norm(vector_B_up_SW)))*180/np.pi\n","if tbn_MC_SW > 90:\n","        tbn_MC_SW = 180 -tbn_MC_SW\n","\n","# -------- calculate and print normal with VC method --------\n","n_VC_SW = -(delta_V_SW) / func.magnitude(delta_V_SW)\n","\n","Bu_dot_nVC_SW = np.dot(-vector_B_up_SW,n_VC_SW)\n","\n","tbn_VC_SW = np.arccos(Bu_dot_nVC_SW / (np.linalg.norm(vector_B_up_SW)))*180/np.pi\n","if tbn_VC_SW > 90:\n","        tbn_VC_SW = 180 -tbn_VC_SW\n","\n","# -------- calculate print normal with MX1 method --------\n","n_MX1_SW = -np.cross(delta_V_cross_B_up_SW, delta_B_SW) / func.magnitude(np.cross(delta_V_cross_B_up_SW, delta_B_SW))\n","\n","Bu_dot_nMX1_SW = np.dot(-vector_B_up_SW,n_MX1_SW)\n","\n","tbn_MX1_SW = np.arccos(Bu_dot_nMX1_SW / (np.linalg.norm(vector_B_up_SW)))*180/np.pi\n","if tbn_MX1_SW > 90:\n","        tbn_MX1_SW = 180 -tbn_MX1_SW\n","\n","# -------- calculate print normal with MX2 method --------\n","n_MX2_SW = -np.cross(delta_V_cross_B_down_SW, delta_B_SW) / func.magnitude(np.cross(delta_V_cross_B_down_SW, delta_B_SW))\n","\n","Bu_dot_nMX2_SW = np.dot(-vector_B_up_SW,n_MX2_SW)\n","\n","tbn_MX2_SW = np.arccos(Bu_dot_nMX2_SW / (np.linalg.norm(vector_B_up_SW)))*180/np.pi\n","if tbn_MX2_SW > 90:\n","        tbn_MX2_SW = 180 -tbn_MX2_SW\n","\n","# -------- calculate print normal with MX3 method --------\n","n_MX3_SW = np.cross(-delta_B_SW, delta_V_cross_delta_B_SW) / func.magnitude(np.cross(delta_B_SW, delta_V_cross_delta_B_SW))\n","\n","Bu_dot_nMX3_SW = np.dot(-vector_B_up_SW,n_MX3_SW)\n","\n","tbn_MX3_SW = np.arccos(Bu_dot_nMX3_SW / (np.linalg.norm(vector_B_up_SW)))*180/np.pi\n","if tbn_MX3_SW > 90:\n","        tbn_MX3_SW = 180 -tbn_MX3_SW\n","\n","\n","# ------------- print the method ------------\n","print(\"normal MC:\", normal_MC_SW, tbn_MC_SW)\n","print(\"normal VC:\", n_VC_SW, tbn_VC_SW)\n","print(\"normal MX1:\", n_MX1_SW, tbn_MX1_SW)\n","print(\"normal MX2:\", n_MX2_SW, tbn_MX2_SW)\n","print(\"normal MX3:\", n_MX3_SW, tbn_MX3_SW)\n","print(\"\")\n","\n","# ======================= Calcul velocity of shock ===================\n","# --------------- calculate the velocity of the shock ---------------\n","velocity_SW = []\n","velocity_SW.append(abs(np.dot(np.subtract((density_down_mean_SW * vector_V_down_SW),(density_up_mean_SW * vector_V_up_SW))/(density_down_mean_SW - density_up_mean_SW), normal_MC_SW)))\n","velocity_SW.append(abs(np.dot(np.subtract((density_down_mean_SW * vector_V_down_SW),(density_up_mean_SW * vector_V_up_SW))/(density_down_mean_SW - density_up_mean_SW), n_VC_SW)))\n","velocity_SW.append(abs(np.dot(np.subtract((density_down_mean_SW * vector_V_down_SW),(density_up_mean_SW * vector_V_up_SW))/(density_down_mean_SW - density_up_mean_SW), n_MX1_SW)))\n","velocity_SW.append(abs(np.dot(np.subtract((density_down_mean_SW * vector_V_down_SW),(density_up_mean_SW * vector_V_up_SW))/(density_down_mean_SW - density_up_mean_SW), n_MX2_SW)))\n","velocity_SW.append(abs(np.dot(np.subtract((density_down_mean_SW * vector_V_down_SW),(density_up_mean_SW * vector_V_up_SW))/(density_down_mean_SW - density_up_mean_SW), n_MX3_SW)))\n","\n","# ----------------- print the velocity of the shock ---------------\n","print('method MC: ', round(velocity_SW[0],2))\n","print('Method VC: ',round(velocity_SW[1],2))\n","print('Method MX1:',round(velocity_SW[2],2))\n","print('Method MX2: ',round(velocity_SW[3],2))\n","print('MEthod MX3: ',round(velocity_SW[4],2))"]},{"cell_type":"markdown","id":"a5a067da","metadata":{"id":"a5a067da"},"source":["## Compute normal and velocity with the Trotta code"]},{"cell_type":"code","execution_count":null,"id":"7f6e6991","metadata":{"scrolled":true,"id":"7f6e6991","executionInfo":{"status":"aborted","timestamp":1697570853332,"user_tz":-60,"elapsed":12,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}}},"outputs":[],"source":["# =============== calculating the normal =================\n","# ---- calculate the normal with MC ------\n","MC_SW = SP.calc_MC(vector_B_up_SW, vector_B_down_SW,\"GSE\")\n","print(\"Normal with MC method: \", MC_SW)\n","# ---- calculate the normal with MX1 ------\n","MX1_SW = SP.calc_MX1(vector_B_up_SW, vector_B_down_SW ,vector_V_up_SW , vector_V_down_SW, \"GSE\")\n","print(\"Normal with MX1 method: \", MX1_SW)\n","# ---- calculate the normal with MX2 ------\n","MX2_SW = SP.calc_MX2(vector_B_up_SW, vector_B_down_SW, vector_V_up_SW, vector_V_down_SW,\"GSE\")\n","print(\"Normal with MX2 method:\", MX2_SW)\n","# ---- calculate the normal with MX3 ------\n","MX3_SW = SP.calc_MX3(vector_B_up_SW, vector_B_down_SW, vector_V_up_SW, vector_V_down_SW, \"GSE\")\n","print(\"Normal with MX3 method:\", MX3_SW)\n","print(\"\")\n","\n","\n","# ======================= Calculating the normal with multiple averaging windows =======================\n","from datetime import datetime, timedelta\n","# -------- calculate the normal with averaging windows --------\n","n_SW, tbn_SW, rB_SW, ex_SW = SP.MX_stats(datetime_index_SW, B_SW, datetime_index_SW, interpolated_data_V_SW, time_shock_SW, up_shk_SW, dw_shk_SW, min_up_dur_SW, max_up_dur_SW, min_dw_dur_SW, max_dw_dur_SW, tcad_SW, \"GSE\")\n","print(\"\")\n","\n","# -------- calculate and compare the average of the normal from Trotta --------\n","mean_values_normal_SW = []\n","\n","mean_values_normal_SW.append(np.nanmean(n_SW.MC, axis=0))\n","mean_values_normal_SW.append(np.nanmean(n_SW.MX1, axis=0))\n","mean_values_normal_SW.append(np.nanmean(n_SW.MX2, axis=0))\n","mean_values_normal_SW.append(np.nanmean(n_SW.MX3, axis=0))\n","\n","# ----- calculate uncertainty in normal -------\n","uncertainty_MC_SW = np.std(n_SW.MC, axis=0)\n","uncertainty_MX1_SW = np.std(n_SW.MX1, axis=0)\n","uncertainty_MX2_SW = np.std(n_SW.MX2, axis=0)\n","uncertainty_MX3_SW = np.std(n_SW.MX3, axis=0)\n","\n","# ----- calculate normal of shock ------\n","print('Method MC:',mean_values_normal_SW[0], \"±\",uncertainty_MC_SW)\n","print('Method MX1:',mean_values_normal_SW[1],\"±\",uncertainty_MX1_SW)\n","print('Method MX2:',mean_values_normal_SW[2],\"±\",uncertainty_MX2_SW)\n","print('Method MX3:',mean_values_normal_SW[3],\"±\",uncertainty_MX3_SW)\n","print(\"\")\n","\n","# ==================== calculating the velocity ===============\n","# -------- define the variable for the code --------\n","def calculate_velocity(n_SW):\n","\n","    V_SW = interpolated_data_V_SW\n","    Rho_SW = extended_density_reshaped_SW\n","    vsh_SW, ex_SW = SP.Vsh_stats(n_SW, datetime_index_SW, V_SW, Rho_SW, time_shock_SW, up_shk_SW, dw_shk_SW, min_up_dur_SW, max_up_dur_SW, min_dw_dur_SW, max_dw_dur_SW, tcad_SW)\n","\n","    return vsh_SW, ex_SW\n","\n","print(\"Velocity for MC\")\n","V_MC_SW = calculate_velocity(mean_values_normal_SW[0])[0]\n","print(\"\")\n","\n","print(\"Velocity for MX1\")\n","V_MX1_SW = calculate_velocity(mean_values_normal_SW[1])[0]\n","print(\"\")\n","\n","print(\"Velocity for MX2\")\n","V_MX2_SW = calculate_velocity(mean_values_normal_SW[2])[0]\n","print(\"\")\n","\n","print(\"Velocity for MX3\")\n","V_MX3_SW = calculate_velocity(mean_values_normal_SW[3])[0]\n","print(\"\")\n","\n","# ---- calculate uncertainty velocity ------\n","uncertainty_velocity_MC_SW = np.std(V_MC_SW)\n","uncertainty_velocity_MX1_SW = np.std(V_MX1_SW)\n","uncertainty_velocity_MX2_SW = np.std(V_MX2_SW)\n","uncertainty_velocity_MX3_SW = np.std(V_MX3_SW)\n","\n","# ----- calculate the velocity of the shock -------\n","mean_values_velocity_SW = []\n","\n","mean_values_velocity_SW.append(np.nanmean(V_MC_SW))\n","mean_values_velocity_SW.append(np.nanmean(V_MX1_SW))\n","mean_values_velocity_SW.append(np.nanmean(V_MX2_SW))\n","mean_values_velocity_SW.append(np.nanmean(V_MX3_SW))\n","\n","print(\"Speed velocity MC\", round(mean_values_velocity_SW[0],2), \"±\",round(uncertainty_velocity_MC_SW,2))\n","print(\"Speed velocity MX1\",round(mean_values_velocity_SW[1],2),\"±\",round(uncertainty_velocity_MX1_SW,2))\n","print(\"Speed velocity MX2\",round(mean_values_velocity_SW[2],2),\"±\",round(uncertainty_velocity_MX2_SW,2))\n","print(\"Speed velocity MX3\",round(mean_values_velocity_SW[3],2),\"±\",round(uncertainty_velocity_MX3_SW,2))"]},{"cell_type":"markdown","id":"5e5cafb4","metadata":{"id":"5e5cafb4"},"source":["# Information satellite msh"]},{"cell_type":"code","execution_count":null,"id":"56a73579","metadata":{"id":"56a73579","executionInfo":{"status":"aborted","timestamp":1697570853332,"user_tz":-60,"elapsed":12,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}}},"outputs":[],"source":["# calcul good format time for chris\n","form_t3_chris = [int(t3[0]), int(t3[1]), int(t3[2])]\n","\n","# calcul good format time for SW\n","time_val_msh = t3[0] + ':' + t3[1] + ':' + t3[2]\n","\n","start_date_msh, end_date_msh, time_shock_msh = func.find_time(day,month,year,time_val_msh,time_obs)\n","\n","# ----- Variable defined for the multiple averaging windows -----\n","# =========== change the value for the averaging windows ==================\n","up_shk_msh = time_shock_msh - timedelta(minutes = 5)\n","dw_shk_msh = time_shock_msh + timedelta(minutes = 5)\n","min_up_dur_msh = timedelta(minutes = 3)\n","max_up_dur_msh = timedelta(minutes = 10)\n","min_dw_dur_msh = timedelta(minutes = 3)\n","max_dw_dur_msh = timedelta(minutes = 10)\n","tcad_msh = timedelta(seconds = 10)\n","\n","# Define the list of time up and down for our averaging range\n","time_up_msh = (time_shock_msh - max_up_dur_msh, up_shk_msh)\n","time_down_msh = (dw_shk_msh, time_shock_msh + max_dw_dur_msh)\n","\n","#define variable to plot the minimum and maximum windows\n","up_window_msh = (up_shk_msh - min_up_dur_msh,up_shk_msh - max_up_dur_msh)\n","down_window_msh = (dw_shk_msh + min_dw_dur_msh, dw_shk_msh + max_dw_dur_msh)"]},{"cell_type":"markdown","id":"32439f07","metadata":{"id":"32439f07"},"source":["# Get data MAGNETIC FIELD"]},{"cell_type":"code","execution_count":null,"id":"836d5ae2","metadata":{"id":"836d5ae2","executionInfo":{"status":"aborted","timestamp":1697570853332,"user_tz":-60,"elapsed":12,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}}},"outputs":[],"source":["# -------- get the data B --------\n","time_mag_msh, B_msh, B_unit_msh, Bx_msh, By_msh, Bz_msh, B_up_msh, B_down_msh = func.get_Bfield(name_spacecraft_msh, start_date_msh, end_date_msh, time_up_msh, time_down_msh)\n","\n","#func.get_coordinate(name_spacecraft)\n","\n","Bx_msh = [b_msh[0] for b_msh in B_msh]\n","By_msh = [b_msh[1] for b_msh in B_msh]\n","Bz_msh = [b_msh[2] for b_msh in B_msh]\n","\n","# ----- Variable defined for the multiple averaging windows -----\n","datetime_objects_msh = pd.to_datetime(time_mag_msh)\n","freq = 'ns'\n","datetime_index_msh = pd.DatetimeIndex(datetime_objects_msh).floor(freq)\n","\n","\n","# =========== Defining the averaging windows for B_up, B_down ===========================\n","# -------------- filtered the value of magnetic field for the defined window range ---------------\n","filtered_Bx_up_msh,filtered_By_up_msh,filtered_Bz_up_msh = func.filtered_B_up(time_mag_msh, Bx_msh, By_msh, Bz_msh, time_up_msh)\n","filtered_Bx_down_msh, filtered_By_down_msh, filtered_Bz_down_msh = func.filtered_B_down(time_mag_msh, Bx_msh, By_msh, Bz_msh, time_down_msh)\n","\n","# ================== calculate average upstream and downstream for bx, by, bz ==========================\n","# ------------ calculate uncertainty for magnetic field --------------------\n","uncertainty_Bx_up = np.std(filtered_Bx_up_msh)\n","uncertainty_Bx_down = np.std(filtered_Bx_down_msh)\n","uncertainty_By_up = np.std(filtered_By_up_msh)\n","uncertainty_By_down = np.std(filtered_By_down_msh)\n","uncertainty_Bz_up = np.std(filtered_Bz_up_msh)\n","uncertainty_Bz_down = np.std(filtered_Bz_down_msh)\n","\n","Bx_up_msh, Bx_down_msh, By_up_msh, By_down_msh, Bz_up_msh, Bz_down_msh =func.calculate_average(filtered_Bx_up_msh,filtered_Bx_down_msh,filtered_By_up_msh,filtered_By_down_msh,filtered_Bz_up_msh,filtered_Bz_down_msh)\n","#create a vector B for an averaging window\n","list_B_up_msh = [Bx_up_msh, By_up_msh, Bz_up_msh]\n","list_B_down_msh = [Bx_down_msh, By_down_msh, Bz_down_msh]\n","\n","vector_B_up_msh = np.array(list_B_up_msh)\n","vector_B_down_msh = np.array(list_B_down_msh)"]},{"cell_type":"markdown","id":"2dd89f43","metadata":{"id":"2dd89f43"},"source":["# Get data VELOCITY"]},{"cell_type":"code","execution_count":null,"id":"87326be4","metadata":{"id":"87326be4","executionInfo":{"status":"aborted","timestamp":1697570853332,"user_tz":-60,"elapsed":12,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}}},"outputs":[],"source":["# Get data for velocity\n","time_velo_msh, V_msh, V_unit_msh, Vx_msh, Vy_msh, Vz_msh, V_up_msh, V_down_msh = func.get_velocity(name_spacecraft_msh, start_date_msh, end_date_msh, time_up_msh, time_down_msh)\n","\n","Vx_msh = [v_msh[0] for v_msh in V_msh]\n","Vy_msh = [v_msh[1] for v_msh in V_msh]\n","Vz_msh = [v_msh[2] for v_msh in V_msh]\n","\n","# ================= Defining the averaging windows for V_up, V_down =================\n","# ----------------------- filtered the velocity for the window range ---------------------\n","filtered_Vx_up_msh, filtered_Vy_up_msh, filtered_Vz_up_msh = func.filtered_V_up(time_velo_msh,Vx_msh, Vy_msh, Vz_msh,time_up_msh)\n","filtered_Vx_down_msh, filtered_Vy_down_msh, filtered_Vz_down_msh = func.filtered_V_down(time_velo_msh,Vx_msh, Vy_msh, Vz_SW,time_down_msh)\n","\n","# ==================== Calculating the average upstream and downstream of Vx, Vy, Vz ====================\n","from scipy.interpolate import interp1d\n","data_msh = V_msh\n","\n","# Number of indexes to extend\n","num_indexes_msh = np.shape(B_msh)[0]\n","\n","# Generate an array of indices\n","indices_msh = np.arange(data_msh.shape[0])\n","\n","# Interpolate each column separately\n","interpolated_data_V_msh = np.empty((num_indexes_msh, data_msh.shape[1]))\n","for col in range(data_msh.shape[1]):\n","    interpolator_msh = interp1d(indices_msh, data_msh[:, col], kind='cubic')\n","    interpolated_data_V_msh[:, col] = interpolator_msh(np.linspace(0, indices_msh[-1], num_indexes_msh))\n","\n","# ------------- calculate uncertainty for velocity ------------\n","uncertainty_Vx_up_msh = np.std(filtered_Vx_up_msh)\n","uncertainty_Vx_down_msh = np.std(filtered_Vx_down_msh)\n","uncertainty_Vy_up_msh = np.std(filtered_Vy_up_msh)\n","uncertainty_Vy_down_msh = np.std(filtered_Vy_down_msh)\n","uncertainty_Vz_up_msh = np.std(filtered_Vz_up_msh)\n","uncertainty_Vz_down_msh = np.std(filtered_Vz_down_msh)\n","\n","Vx_up_msh, Vx_down_msh, Vy_up_msh, Vy_down_msh, Vz_up_msh, Vz_down_msh = func.calculate_average(filtered_Vx_up_msh,filtered_Vx_down_msh,filtered_Vy_up_msh,filtered_Vy_down_msh,filtered_Vz_up_msh,filtered_Vz_down_msh)\n","\n","#create a vector V for a defined range\n","list_V_up_msh = [Vx_up_msh, Vy_up_msh, Vz_up_msh]\n","list_V_down_msh = [Vx_down_msh, Vy_down_msh, Vz_down_msh]\n","\n","vector_V_up_msh = np.array(list_V_up_msh)\n","vector_V_down_msh = np.array(list_V_down_msh)"]},{"cell_type":"markdown","id":"5cbe0883","metadata":{"id":"5cbe0883"},"source":["# Get data density"]},{"cell_type":"code","execution_count":null,"id":"8b0b36d5","metadata":{"id":"8b0b36d5","executionInfo":{"status":"aborted","timestamp":1697570853332,"user_tz":-60,"elapsed":12,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}}},"outputs":[],"source":["# -------- get the data for the density --------\n","time_rho_msh, density_msh, density_unit_msh, density_up_msh, density_down_msh = func.get_density(name_spacecraft_msh, start_date_msh, end_date_msh, time_up_msh, time_down_msh)\n","\n","Rho_msh = [Density_msh[0] for Density_msh in density_msh]\n","\n","# =================== Defining the averaging windows for n_up, n_down =====================\n","filtered_density_up_msh = func.filtered_N_up(time_rho_msh,Rho_msh,time_up_msh)\n","filtered_density_down_msh = func.filtered_N_down(time_rho_msh,Rho_msh,time_down_msh)\n","\n","# ----- calculate uncertainty density -----\n","uncertainty_density_x_up_msh = np.std(filtered_density_up_msh)\n","uncertainty_density_x_down_msh = np.std(filtered_density_down_msh)\n","\n","# ------- Make an array with the data --------\n","indices_density_msh = np.linspace(0, len(density_msh) - 1, num=len(density_msh))\n","\n","new_indices_density_msh = np.linspace(0, len(density_msh) - 1, num=np.shape(B_msh)[0])\n","\n","original_data_flat_msh = np.ravel(density_msh)\n","indices_flat_msh = np.ravel(indices_density_msh)\n","\n","extended_density_msh = np.interp(new_indices_density_msh, indices_flat_msh, original_data_flat_msh)\n","\n","# Reshape extended_density\n","extended_density_reshaped_msh = extended_density_msh.reshape((np.shape(B_msh)[0], 1))"]},{"cell_type":"code","execution_count":null,"id":"976905e4","metadata":{"id":"976905e4","executionInfo":{"status":"aborted","timestamp":1697570853332,"user_tz":-60,"elapsed":12,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}}},"outputs":[],"source":["# -------------- find the coordinates of the satellite ----------------\n","S2 = func.get_coordinate(name_spacecraft_msh,time_shock_msh)[0]\n","print(\"\")\n","\n","# --------------- calculate average values for V --------------------\n","Vx_up_msh, Vx_down_msh, Vy_up_msh, Vy_down_msh, Vz_up_msh, Vz_down_msh = func.calculate_average(filtered_Vx_up_msh,filtered_Vx_down_msh,filtered_Vy_up_msh,filtered_Vy_down_msh,filtered_Vz_up_msh,filtered_Vz_down_msh)\n","u_msh = [Vx_up_msh,Vy_up_msh,Vz_up_msh]\n","\n","# ----------------- Calculate the average value for n ------------------\n","density_up_mean_msh = sum(filtered_density_up_msh) / len(filtered_density_up_msh)\n","density_down_mean_msh = sum(filtered_density_down_msh) / len(filtered_density_down_msh)"]},{"cell_type":"markdown","id":"a9220194","metadata":{"id":"a9220194"},"source":["# Calculating normal and velocity with one window"]},{"cell_type":"code","execution_count":null,"id":"df6601a7","metadata":{"id":"df6601a7","executionInfo":{"status":"aborted","timestamp":1697570853332,"user_tz":-60,"elapsed":12,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}}},"outputs":[],"source":["# ======================== Computing the normals: MC, VC, MX1, MX2, MX3 =========================\n","\n","# ---------- define cross product --------\n","delta_B_msh = (vector_B_up_msh) - (vector_B_down_msh)\n","\n","delta_V_msh = (vector_V_up_msh) - (vector_V_down_msh)\n","\n","B_up_cross_B_down_msh = np.cross(vector_B_up_msh, vector_B_down_msh)\n","\n","delta_V_cross_B_up_msh = np.cross(delta_V_msh, vector_B_up_msh)\n","\n","delta_V_cross_B_down_msh = np.cross(delta_V_msh, vector_B_down_msh)\n","\n","delta_V_cross_delta_B_msh = np.cross(delta_V_msh, delta_B_msh)\n","\n","\n","\n","# -------- calculate and print normal with MC method --------\n","normal_MC_msh = -(np.cross(B_up_cross_B_down_msh,-delta_B_msh)) / (func.magnitude((np.cross(B_up_cross_B_down_msh,-delta_B_msh))))\n","\n","Bu_dot_nMC_msh = np.dot(-vector_B_up_msh,normal_MC_msh)\n","\n","tbn_MC_msh = np.arccos(Bu_dot_nMC_msh / (np.linalg.norm(vector_B_up_msh)))*180/np.pi\n","if tbn_MC_msh > 90:\n","        tbn_MC_msh = 180 -tbn_MC_msh\n","\n","# -------- calculate and print normal with VC method --------\n","n_VC_msh = -(delta_V_msh) / func.magnitude(delta_V_msh)\n","\n","Bu_dot_nVC_msh = np.dot(-vector_B_up_msh,n_VC_msh)\n","\n","tbn_VC_msh = np.arccos(Bu_dot_nVC_msh / (np.linalg.norm(vector_B_up_msh)))*180/np.pi\n","if tbn_VC_msh > 90:\n","        tbn_VC_msh = 180 -tbn_VC_msh\n","\n","# -------- calculate print normal with MX1 method --------\n","n_MX1_msh = -np.cross(delta_V_cross_B_up_msh, delta_B_msh) / func.magnitude(np.cross(delta_V_cross_B_up_msh, delta_B_msh))\n","\n","Bu_dot_nMX1_msh = np.dot(-vector_B_up_msh,n_MX1_msh)\n","\n","tbn_MX1_msh = np.arccos(Bu_dot_nMX1_msh / (np.linalg.norm(vector_B_up_msh)))*180/np.pi\n","if tbn_MX1_msh > 90:\n","        tbn_MX1_msh = 180 -tbn_MX1_msh\n","\n","# -------- calculate print normal with MX2 method --------\n","n_MX2_msh = -np.cross(delta_V_cross_B_down_msh, delta_B_msh) / func.magnitude(np.cross(delta_V_cross_B_down_msh, delta_B_msh))\n","\n","Bu_dot_nMX2_msh = np.dot(-vector_B_up_msh,n_MX2_msh)\n","\n","tbn_MX2_msh = np.arccos(Bu_dot_nMX2_msh / (np.linalg.norm(vector_B_up_msh)))*180/np.pi\n","if tbn_MX2_msh > 90:\n","        tbn_MX2_msh = 180 -tbn_MX2_msh\n","\n","# -------- calculate print normal with MX3 method --------\n","n_MX3_msh = np.cross(-delta_B_msh, delta_V_cross_delta_B_msh) / func.magnitude(np.cross(delta_B_msh, delta_V_cross_delta_B_msh))\n","\n","Bu_dot_nMX3_msh = np.dot(-vector_B_up_msh,n_MX3_msh)\n","\n","tbn_MX3_msh = np.arccos(Bu_dot_nMX3_msh / (np.linalg.norm(vector_B_up_msh)))*180/np.pi\n","if tbn_MX3_msh > 90:\n","        tbn_MX3_msh = 180 -tbn_MX3_msh\n","\n","\n","# ------------- print the method ------------\n","print(\"normal MC:\", normal_MC_msh, tbn_MC_msh)\n","print(\"normal VC:\", n_VC_msh, tbn_VC_msh)\n","print(\"normal MX1:\", n_MX1_msh, tbn_MX1_msh)\n","print(\"normal MX2:\", n_MX2_msh, tbn_MX2_msh)\n","print(\"normal MX3:\", n_MX3_msh, tbn_MX3_msh)\n","print(\"\")\n","\n","# ======================= Calcul velocity of shock ===================\n","# --------------- calculate the velocity of the shock ---------------\n","velocity_msh = []\n","velocity_msh.append(abs(np.dot(np.subtract((density_down_mean_msh * vector_V_down_msh),(density_up_mean_msh * vector_V_up_msh))/(density_down_mean_msh - density_up_mean_msh), normal_MC_msh)))\n","velocity_msh.append(abs(np.dot(np.subtract((density_down_mean_msh * vector_V_down_msh),(density_up_mean_msh * vector_V_up_msh))/(density_down_mean_msh - density_up_mean_msh), n_VC_msh)))\n","velocity_msh.append(abs(np.dot(np.subtract((density_down_mean_msh * vector_V_down_msh),(density_up_mean_msh * vector_V_up_msh))/(density_down_mean_msh - density_up_mean_msh), n_MX1_msh)))\n","velocity_msh.append(abs(np.dot(np.subtract((density_down_mean_msh * vector_V_down_msh),(density_up_mean_msh * vector_V_up_msh))/(density_down_mean_msh - density_up_mean_msh), n_MX2_msh)))\n","velocity_msh.append(abs(np.dot(np.subtract((density_down_mean_msh * vector_V_down_msh),(density_up_mean_msh * vector_V_up_msh))/(density_down_mean_msh - density_up_mean_msh), n_MX3_msh)))\n","\n","# ----------------- print the velocity of the shock ---------------\n","print('method MC: ', round(velocity_msh[0],2))\n","print('Method VC: ',round(velocity_msh[1],2))\n","print('Method MX1:',round(velocity_msh[2],2))\n","print('Method MX2: ',round(velocity_msh[3],2))\n","print('MEthod MX3: ',round(velocity_msh[4],2))"]},{"cell_type":"markdown","id":"92048634","metadata":{"id":"92048634"},"source":["# Compute normal and velocity with the Trotta code"]},{"cell_type":"code","execution_count":null,"id":"f44ec592","metadata":{"scrolled":false,"id":"f44ec592","executionInfo":{"status":"aborted","timestamp":1697570853332,"user_tz":-60,"elapsed":12,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}}},"outputs":[],"source":["# =============== calculating the normal =================\n","# ---- calculate the normal with MC ------\n","MC_msh = SP.calc_MC(vector_B_up_msh, vector_B_down_msh,\"GSE\")\n","print(\"Normal with MC method: \", MC_msh)\n","# ---- calculate the normal with MX1 ------\n","MX1_msh = SP.calc_MX1(vector_B_up_msh, vector_B_down_msh ,vector_V_up_msh , vector_V_down_msh, \"GSE\")\n","print(\"Normal with MX1 method: \", MX1_msh)\n","# ---- calculate the normal with MX2 ------\n","MX2_msh = SP.calc_MX2(vector_B_up_msh, vector_B_down_msh, vector_V_up_msh, vector_V_down_msh,\"GSE\")\n","print(\"Normal with MX2 method:\", MX2_msh)\n","# ---- calculate the normal with MX3 ------\n","MX3_msh = SP.calc_MX3(vector_B_up_msh, vector_B_down_msh, vector_V_up_msh, vector_V_down_msh, \"GSE\")\n","print(\"Normal with MX3 method:\", MX3_msh)\n","print(\"\")\n","\n","\n","# ======================= Calculating the normal with multiple averaging windows =======================\n","from datetime import datetime, timedelta\n","# -------- calculate the normal with averaging windows --------\n","n_msh, tbn_msh, rB_msh, ex_msh = SP.MX_stats(datetime_index_msh, B_msh, datetime_index_msh, interpolated_data_V_msh, time_shock_msh, up_shk_msh, dw_shk_msh, min_up_dur_msh, max_up_dur_msh, min_dw_dur_msh, max_dw_dur_msh, tcad_msh, \"GSE\")\n","print(\"\")\n","\n","# -------- calculate and compare the average of the normal from Trotta --------\n","mean_values_normal_msh = []\n","\n","mean_values_normal_msh.append(np.nanmean(n_msh.MC, axis=0))\n","mean_values_normal_msh.append(np.nanmean(n_msh.MX1, axis=0))\n","mean_values_normal_msh.append(np.nanmean(n_msh.MX2, axis=0))\n","mean_values_normal_msh.append(np.nanmean(n_msh.MX3, axis=0))\n","\n","# ----- calculate uncertainty in normal -------\n","uncertainty_MC_msh = np.std(n_msh.MC, axis=0)\n","uncertainty_MX1_msh = np.std(n_msh.MX1, axis=0)\n","uncertainty_MX2_msh = np.std(n_msh.MX2, axis=0)\n","uncertainty_MX3_msh = np.std(n_msh.MX3, axis=0)\n","\n","# ----- calculate normal of shock ------\n","print('Method MC:',mean_values_normal_msh[0], \"±\",uncertainty_MC_msh)\n","print('Method MX1:',mean_values_normal_msh[1],\"±\",uncertainty_MX1_msh)\n","print('Method MX2:',mean_values_normal_msh[2],\"±\",uncertainty_MX2_msh)\n","print('Method MX3:',mean_values_normal_msh[3],\"±\",uncertainty_MX3_msh)\n","print(\"\")\n","\n","# ==================== calculating the velocity ===============\n","# -------- define the variable for the code --------\n","def calculate_velocity(n_msh):\n","\n","    V_msh = interpolated_data_V_msh\n","    Rho_msh = extended_density_reshaped_msh\n","    vsh_msh, ex_msh = SP.Vsh_stats(n_msh, datetime_index_msh, V_msh, Rho_msh, time_shock_msh, up_shk_msh, dw_shk_msh, min_up_dur_msh, max_up_dur_msh, min_dw_dur_msh, max_dw_dur_msh, tcad_msh)\n","\n","    return vsh_msh, ex_msh\n","\n","print(\"Velocity for MC\")\n","V_MC_msh = calculate_velocity(mean_values_normal_msh[0])[0]\n","print(\"\")\n","\n","print(\"Velocity for MX1\")\n","V_MX1_msh = calculate_velocity(mean_values_normal_msh[1])[0]\n","print(\"\")\n","\n","print(\"Velocity for MX2\")\n","V_MX2_msh = calculate_velocity(mean_values_normal_msh[2])[0]\n","print(\"\")\n","\n","print(\"Velocity for MX3\")\n","V_MX3_msh = calculate_velocity(mean_values_normal_msh[3])[0]\n","print(\"\")\n","\n","# ---- calculate uncertainty velocity ------\n","uncertainty_velocity_MC_msh = np.std(V_MC_msh)\n","uncertainty_velocity_MX1_msh = np.std(V_MX1_msh)\n","uncertainty_velocity_MX2_msh = np.std(V_MX2_msh)\n","uncertainty_velocity_MX3_msh = np.std(V_MX3_msh)\n","\n","# ----- calculate the velocity of the shock -------\n","mean_values_velocity_msh = []\n","\n","mean_values_velocity_msh.append(np.nanmean(V_MC_msh))\n","mean_values_velocity_msh.append(np.nanmean(V_MX1_msh))\n","mean_values_velocity_msh.append(np.nanmean(V_MX2_msh))\n","mean_values_velocity_msh.append(np.nanmean(V_MX3_msh))\n","\n","print(\"Speed velocity MC\", round(mean_values_velocity_msh[0],2), \"±\",round(uncertainty_velocity_MC_msh,2))\n","print(\"Speed velocity MX1\",round(mean_values_velocity_msh[1],2),\"±\",round(uncertainty_velocity_MX1_msh,2))\n","print(\"Speed velocity MX2\",round(mean_values_velocity_msh[2],2),\"±\",round(uncertainty_velocity_MX2_msh,2))\n","print(\"Speed velocity MX3\",round(mean_values_velocity_msh[3],2),\"±\",round(uncertainty_velocity_MX3_msh,2))"]},{"cell_type":"markdown","id":"1d720f86","metadata":{"id":"1d720f86"},"source":["# Show graph B, V, n for SW and msh"]},{"cell_type":"code","execution_count":null,"id":"d1fbb2fd","metadata":{"id":"d1fbb2fd","executionInfo":{"status":"aborted","timestamp":1697570853332,"user_tz":-60,"elapsed":11,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}}},"outputs":[],"source":["# ===================== plot of SW ==========================\n","\n","fig_SW = plt.figure(figsize=(10, 7))\n","gs_SW = fig_SW.add_gridspec(6, hspace=0)\n","axes_SW = gs_SW.subplots(sharex=True, sharey=False)\n","\n","plt.xlabel('Universal Time (date/hour/minute)',fontsize = 11)\n","\n","axes_SW[0].plot(time_mag_SW, Bx_SW, color='blue', label = 'Bx')\n","axes_SW[0].plot(time_mag_SW, By_SW, color='orange', label = 'By')\n","axes_SW[0].plot(time_mag_SW, Bz_SW, color='maroon', label = 'Bz')\n","axes_SW[0].legend()\n","axes_SW[0].axvline(time_shock_SW, c = 'red')\n","axes_SW[0].set_ylabel('B Field GSE (nT)', fontsize = 9)\n","func.plot_line(time_up_SW,time_down_SW,up_window_SW,down_window_SW, up_shk_SW, dw_shk_SW,time_shock_SW,ax=axes_SW[0])\n","\n","\n","axes_SW[1].plot(time_velo_SW, Vx_SW, color='blue', label = 'Vx')\n","axes_SW[1].plot(time_velo_SW, Vy_SW, color='red', label = 'Vy')\n","axes_SW[1].plot(time_velo_SW, Vz_SW, color ='limegreen' ,label = 'Vz')\n","axes_SW[1].legend()\n","axes_SW[1].axvline(time_shock_SW, c = 'red')\n","axes_SW[1].set_ylabel('Velocity (km/s)', fontsize = 9)\n","func.plot_line(time_up_SW,time_down_SW,up_window_SW,down_window_SW, up_shk_SW, dw_shk_SW,time_shock_SW,ax=axes_SW[1])\n","\n","\n","axes_SW[2].plot(time_rho_SW, Rho_SW, color='midnightblue')\n","axes_SW[2].axvline(time_shock_SW, c = 'red')\n","axes_SW[2].set_ylabel('Density (cm-3)', fontsize = 9)\n","func.plot_line(time_up_SW,time_down_SW,up_window_SW,down_window_SW, up_shk_SW, dw_shk_SW,time_shock_SW,ax=axes_SW[2])\n","\n","fig_SW.suptitle(f'Plasma characteristics measured by: {name_spacecraft_SW}', fontsize = 16)\n","plt.tight_layout()\n","\n","\n","# ================ plot of msh =======================\n","\n","#fig_msh = plt.figure(figsize=(8, 6))\n","#gs_msh = fig_msh.add_gridspec(3, hspace=0)\n","#axes_msh = gs_msh.subplots(sharex=True, sharey=False)\n","\n","#plt.xlabel('Universal Time (date/hour/minute)',fontsize = 11)\n","\n","axes_SW[3].plot(time_mag_msh, Bx_msh, color='blue', label = 'Bx')\n","axes_SW[3].plot(time_mag_msh, By_msh, color='orange', label = 'By')\n","axes_SW[3].plot(time_mag_msh, Bz_msh, color='maroon', label = 'Bz')\n","axes_SW[3].legend()\n","axes_SW[3].axvline(time_shock_msh, c = 'red')\n","axes_SW[3].set_ylabel('B Field GSE (nT)', fontsize = 9)\n","func.plot_line(time_up_msh,time_down_msh,up_window_msh,down_window_msh, up_shk_msh, dw_shk_msh,time_shock_msh,ax=axes_SW[3])\n","\n","\n","axes_SW[4].plot(time_velo_msh, Vx_msh, color='blue', label = 'Vx')\n","axes_SW[4].plot(time_velo_msh, Vy_msh, color='red', label = 'Vy')\n","axes_SW[4].plot(time_velo_msh, Vz_msh, color ='limegreen' ,label = 'Vz')\n","axes_SW[4].legend()\n","axes_SW[4].axvline(time_shock_msh, c = 'red')\n","axes_SW[4].set_ylabel('Velocity (km/s)', fontsize = 9)\n","func.plot_line(time_up_msh,time_down_msh,up_window_msh,down_window_msh, up_shk_msh, dw_shk_msh,time_shock_msh,ax=axes_SW[4])\n","\n","\n","axes_SW[5].plot(time_rho_msh, Rho_msh, color='midnightblue')\n","axes_SW[5].axvline(time_shock_msh, c = 'red')\n","axes_SW[5].set_ylabel('Density (cm-3)', fontsize = 9)\n","func.plot_line(time_up_msh,time_down_msh,up_window_msh,down_window_msh, up_shk_msh, dw_shk_msh,time_shock_msh,ax=axes_SW[5])\n","\n","fig_SW.suptitle(f'Plasma characteristics measured by: {name_spacecraft_msh}, and {name_spacecraft_SW} ', fontsize = 16)\n","plt.tight_layout()"]},{"cell_type":"markdown","id":"6152a80f","metadata":{"id":"6152a80f"},"source":["# append the list for chris in a json file"]},{"cell_type":"code","execution_count":null,"id":"cc903fd3","metadata":{"scrolled":true,"id":"cc903fd3","executionInfo":{"status":"aborted","timestamp":1697570853332,"user_tz":-60,"elapsed":11,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}}},"outputs":[],"source":["def mag(x):\n","    a = np.sqrt(np.dot(x,x))\n","\n","    return a\n","\n","\n","u_sw = [Vx_up_SW,Vy_up_SW,Vz_up_SW]\n","\n","#additive hypothesis\n","V_minus_U_SW = mean_values_velocity_SW[3] - mag(u_sw)\n","V_minus_U_msh = mean_values_velocity_msh[3] - mag(u_msh)\n","\n","#print the hypothesis\n","print('additive: ', V_minus_U_SW-V_minus_U_msh)\n","print(\"\")\n","\n","#print both side (SW and msh)\n","print('Vsw - Usw:', V_minus_U_SW)\n","print('Vmsh - Umsh:', V_minus_U_msh)\n","print(\"\")\n","\n","#print the different componenet\n","print('Usw:', mag(u_sw))\n","print('Umsh:', mag(u_msh))\n","print('Vsw:', mean_values_velocity_SW[3])\n","print('Vmsh:', mean_values_velocity_msh[3])"]},{"cell_type":"code","execution_count":null,"id":"22daeb54","metadata":{"id":"22daeb54","executionInfo":{"status":"aborted","timestamp":1697570853333,"user_tz":-60,"elapsed":12,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}}},"outputs":[],"source":["answer = input(\"Do you want to save the files ?:\")"]},{"cell_type":"code","execution_count":null,"id":"3d841bee","metadata":{"id":"3d841bee","executionInfo":{"status":"aborted","timestamp":1697570853333,"user_tz":-60,"elapsed":12,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}}},"outputs":[],"source":["import json\n","\n","def create_or_append_shock_json(file_name, index_number, date, s1, t1, s2, t3, density, density_error, u_sw, u_sw_err, B_sw, B_sw_err, Shock_methods):\n","    try:\n","        with open(file_name, 'r') as file:\n","            file_array = json.load(file)\n","    except (FileNotFoundError, json.JSONDecodeError):\n","        file_array = []\n","\n","    index_number = len(file_array) + 1\n","\n","    new_data = {\n","        str(index_number): {\n","            \"Date\": date,\n","            \"S1\": s1,\n","            \"t1\": t1,\n","            \"S2\": s2,\n","            \"t3\": t3,\n","            \"Density\": [density, density_error],\n","            \"u_sw\": u_sw,\n","            \"u_sw_err\": u_sw_err,\n","            \"B_sw\": B_sw,\n","            \"B_sw_err\": B_sw_err,\n","            \"Shock\": {\n","                \"MC\": {\"v_sw\": Shock_methods[0][0], \"normal\": Shock_methods[0][1], \"n_err\": Shock_methods[0][2]},\n","                \"MX1\": {\"v_sw\": Shock_methods[1][0], \"normal\": Shock_methods[1][1], \"n_err\": Shock_methods[1][2]},\n","                \"MX2\": {\"v_sw\": Shock_methods[2][0], \"normal\": Shock_methods[2][1], \"n_err\": Shock_methods[2][2]},\n","                \"MX3\": {\"v_sw\": Shock_methods[3][0], \"normal\": Shock_methods[3][1], \"n_err\": Shock_methods[3][2]}\n","            }\n","        }\n","    }\n","\n","    file_array.append(new_data)\n","\n","    with open(file_name, 'w') as f:\n","        json.dump(file_array, f, indent=None, separators=(',', ':'))"]},{"cell_type":"code","execution_count":null,"id":"34d8af7e","metadata":{"id":"34d8af7e","executionInfo":{"status":"aborted","timestamp":1697570853333,"user_tz":-60,"elapsed":12,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}}},"outputs":[],"source":["if answer == 'y':\n","\n","    S1_form = S1.tolist()[0]\n","    S2_form = S2.tolist()[0]\n","    u_sw = [Vx_up_SW,Vy_up_SW,Vz_up_SW]\n","    B_sw_err = [uncertainty_Bx_up_SW,uncertainty_By_up_SW,uncertainty_Bz_up_SW]\n","    B_sw = [Bx_up_SW,By_up_SW,Bz_up_SW]\n","    u_sw_err = [uncertainty_Vx_up_SW,uncertainty_Vy_up_SW,uncertainty_Vz_up_SW]\n","\n","    Shock_methods = [ [[mean_values_velocity_SW[0],uncertainty_velocity_MC_SW], mean_values_normal_SW[0].tolist(), uncertainty_MC_SW.tolist()],\n","                   [[mean_values_velocity_SW[1],uncertainty_velocity_MX1_SW], mean_values_normal_SW[1].tolist(), uncertainty_MX1_SW.tolist()],\n","                   [[mean_values_velocity_SW[2],uncertainty_velocity_MX2_SW], mean_values_normal_SW[2].tolist(), uncertainty_MX2_SW.tolist()],\n","                   [[mean_values_velocity_SW[3],uncertainty_velocity_MX3_SW], mean_values_normal_SW[3].tolist(), uncertainty_MX3_SW.tolist()]\n","                 ]\n","    create_or_append_shock_json(name_file,index,form_date,S1_form,form_t1_chris,S2_form,form_t3_chris,density_up_mean_SW,uncertainty_density_x_up_SW,u_sw,u_sw_err,B_sw,B_sw_err,Shock_methods)"]},{"cell_type":"code","execution_count":null,"id":"65e5b04d","metadata":{"id":"65e5b04d","executionInfo":{"status":"aborted","timestamp":1697570853333,"user_tz":-60,"elapsed":12,"user":{"displayName":"Adam Hitchmough","userId":"18244811248052498424"}}},"outputs":[],"source":[]}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.9"},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":5}
